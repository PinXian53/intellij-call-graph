<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>com.pino.intellij-code-trace</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Code Trace</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor>Pino</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
<b>Code Trace</b> is an IntelliJ IDEA plugin that analyzes your project‚Äôs source code and extracts method-to-method call relationships.
It helps developers and architects better understand the structure and dependencies within their codebase.

<h2>Features</h2>
<h3>üîó Analyze Method Call Relationships</h3>
Automatically detects and maps which methods call which, across your entire project.

<h3>üìÑ Export to CSV</h3>
Easily export analyzed data for further processing in Excel, scripts, or custom analysis tools.

<h3>üåê Export to Cypher (Neo4j)</h3>
Generate Cypher queries to import method relationships into a Neo4j graph database for rich visual analysis and graph-based querying.

<h3>‚öôÔ∏è Simple to Use</h3>
In the <b>Project View</b>, select the folder or file you want to analyze, right-click, and choose <b>"Export Code Trace"</b>. Then, select your preferred output format.


<h2>Output Format Examples</h2>
The plugin supports exporting method relationships in two formats: CSV and Cypher.

<h3>üìÑ CSV Output</h3>
The CSV file contains information about caller and callee methods, making it easy to analyze dependencies in spreadsheet applications or custom scripts.<br/>
‚Ä¢ Example:
<pre style="border: 1px solid black;">
caller_short_name,caller_full_name,callee_short_name,callee_full_name
"MethodUtils.getFullName","com.pino.intellijcodetrace.utils.MethodUtils.getFullName(Method)","Method.getClassQualifiedName","com.pino.intellijcodetrace.model.Method.getClassQualifiedName()"
"MethodUtils.getShortName","com.pino.intellijcodetrace.utils.MethodUtils.getShortName(Method)","Method.getClassName","com.pino.intellijcodetrace.model.Method.getClassName()"
</pre>

<h3>üåê Cypher Output (Neo4j)</h3>
The Cypher output includes syntax to create relationships in Neo4j. <br/>
‚Ä¢ Example:
<pre style="border: 1px solid black;">
MERGE (a:method {short_name: "MethodUtils.getFullName", full_name: "com.pino.intellijcodetrace.utils.MethodUtils.getFullName(Method)"}) MERGE (b:method {short_name: "Method.getClassQualifiedName", full_name: "com.pino.intellijcodetrace.model.Method.getClassQualifiedName()"}) MERGE (a)-[:call_method]-&gt;(b);
MERGE (a:method {short_name: "MethodUtils.getShortName", full_name: "com.pino.intellijcodetrace.utils.MethodUtils.getShortName(Method)"}) MERGE (b:method {short_name: "Method.getClassName", full_name: "com.pino.intellijcodetrace.model.Method.getClassName()"}) MERGE (a)-[:call_method]-&gt;(b);
</pre>

After importing into Neo4j, the method call relationships will appear as shown below: <br/>
<img src="https://raw.githubusercontent.com/PinXian53/intellij-code-trace/main/pic/neo4j.png" alt="neo4j.png" />
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.java</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">

    </extensions>
    <actions>
        <group id="CodeTraceActionGroup"
               text="Export Code Trace"
               icon="/icons/actionIcon.svg"
               popup="true">
            <action id="com.pino.intellijcodetrace.action.CsvCodeTraceAction"
                    class="com.pino.intellijcodetrace.action.CsvCodeTraceAction"
                    text="Export Code Trace (CSV)"
                    icon="/icons/actionIcon.svg">
            </action>
            <action id="com.pino.intellijcodetrace.action.CypherCodeTraceAction"
                    class="com.pino.intellijcodetrace.action.CypherCodeTraceAction"
                    text="Export Code Trace (Cypher)"
                    icon="/icons/actionIcon.svg">
            </action>
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
        </group>

    </actions>
</idea-plugin>
